{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "layers.schema.json",
  "title": "layer objects",
  "definitions": {
    "layer_objects": {
      "type": "array",
      "minItems": 1,
      "description": "array of layer objects The complete PSD manifest generated by layers.read, with your desired changes, should be included in the request but for brevity the docs only show examples for layers that contain adds or edits",
      "items": {
        "$ref": "#/definitions/layer_object"
      }
    },
    "layer_object": {
      "type": "object",
      "minProperties": 1,
      "allOf": [
        {
          "if": {
            "properties": {
              "edit": {
                "$ref": "#/definitions/edit"
              },
              "move": {
                "$ref": "#/definitions/move"
              }
            },
            "oneOf": [
              {
                "required": [
                  "edit"
                ]
              },
              {
                "required": [
                  "move"
                ]
              }
            ]
          },
          "then": {
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "enum": [
                        "adjustmentLayer"
                      ]
                    }
                  },
                  "required": [
                    "type"
                  ]
                },
                "then": {
                  "required": [
                    "adjustments"
                  ]
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "enum": [
                        "layer",
                        "smartObject"
                      ]
                    }
                  },
                  "required": [
                    "type"
                  ]
                },
                "then": {
                  "allOf": [
                    {
                      "properties": {
                        "fillToCanvas": {
                          "$ref": "#/definitions/fill_to_canvas"
                        }
                      }
                    },
                    {
                      "properties": {
                        "verticalAlign": {
                          "$ref": "#/definitions/vertical_align"
                        }
                      }
                    },
                    {
                      "properties": {
                        "horizontalAlign": {
                          "$ref": "#/definitions/horizontal_align"
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "properties": {
              "adjustments": {
                "$ref": "#/definitions/adjustments"
              },
              "bounds": {
                "$ref": "bounds.schema.json#/definitions/bounds"
              },
              "id": {
                "$ref": "#/definitions/id"
              },
              "index": {
                "$ref": "#/definitions/index"
              },
              "input": {
                "$ref": "file_input.schema.json#/definitions/input_object"
              },
              "locked": {
                "$ref": "#/definitions/locked"
              },
              "mask": {
                "$ref": "#/definitions/mask"
              },
              "name": {
                "$ref": "#/definitions/name"
              },
              "smartObject": {
                "$ref": "#/definitions/smart_object"
              },
              "text": {
                "$ref": "#/definitions/text"
              },
              "children": {
                "$ref": "#/definitions/children"
              },
              "blendOptions": {
                "$ref": "#/definitions/blendOptions"
              },
              "fill": {
                "$ref": "#/definitions/fill"
              },
              "fillToCanvas": {
                "$ref": "#/definitions/fill_to_canvas"
              },
              "horizontalAlign": {
                "$ref": "#/definitions/horizontal_align"
              },
              "verticalAlign": {
                "$ref": "#/definitions/vertical_align"
              }
            },
            "anyOf": [
              {
                "required": [
                  "id"
                ]
              },
              {
                "required": [
                  "name"
                ]
              }
            ]
          }
        },
        {
          "if": {
            "properties": {
              "add": {
                "$ref": "#/definitions/add"
              }
            },
            "required": [
              "add"
            ]
          },
          "then": {
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "enum": [
                        "adjustmentLayer"
                      ]
                    }
                  }
                },
                "then": {
                  "required": [
                    "adjustments"
                  ]
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "enum": [
                        "layer",
                        "smartObject"
                      ]
                    }
                  }
                },
                "then": {
                  "allOf": [
                    {
                      "properties": {
                        "fillToCanvas": {
                          "$ref": "#/definitions/fill_to_canvas"
                        }
                      }
                    },
                    {
                      "properties": {
                        "verticalAlign": {
                          "$ref": "#/definitions/vertical_align"
                        }
                      }
                    },
                    {
                      "properties": {
                        "horizontalAlign": {
                          "$ref": "#/definitions/horizontal_align"
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "properties": {
              "adjustments": {
                "$ref": "#/definitions/adjustments"
              },
              "bounds": {
                "$ref": "bounds.schema.json#/definitions/bounds"
              },
              "children": {
                "$ref": "#/definitions/children"
              },
              "input": {
                "$ref": "file_input.schema.json#/definitions/input_object"
              },
              "locked": {
                "$ref": "#/definitions/locked"
              },
              "mask": {
                "$ref": "#/definitions/mask"
              },
              "name": {
                "$ref": "#/definitions/name"
              },
              "smartObject": {
                "$ref": "#/definitions/smart_object"
              },
              "text": {
                "$ref": "#/definitions/text"
              },
              "blendOptions": {
                "$ref": "#/definitions/blendOptions"
              },
              "fill": {
                "$ref": "#/definitions/fill"
              }
            },
            "dependencies": {
              "smartObject": [
                "input"
              ]
            }
          }
        },
        {
          "if": {
            "properties": {
              "delete": {
                "$ref": "#/definitions/delete"
              }
            },
            "required": [
              "delete"
            ]
          },
          "then": {
            "properties": {
              "id": {
                "$ref": "#/definitions/id"
              },
              "name": {
                "$ref": "#/definitions/name"
              }
            },
            "anyOf": [
              {
                "required": [
                  "id"
                ]
              },
              {
                "required": [
                  "name"
                ]
              }
            ]
          }
        }
      ]
    },
    "add": {
      "type": "object",
      "description": "Inidicates you want to add a new layer. You must also indicate where you want to insert the new layer by supplying one of the attributes `insertAbove`, `insertBelow`, `insertInto`, `insertTop` or `insertBottom`. After successful completion of this async request please call layers.read again in order to get a refreshed manifest with the latest layer indexes and any new layer id's. Currently supported layer types available for add are 'layer,', 'textLayer', 'adjustmentLayer'",
      "$ref": "#/definitions/insertAttrs"
    },
    "adjustments": {
      "type": "object",
      "definition": "Supported adjustment layer attributes.",
      "minProperties": 1,
      "anyOf": [
        {
          "required": [
            "brightnessContrast"
          ]
        },
        {
          "required": [
            "exposure"
          ]
        },
        {
          "required": [
            "hueSaturation"
          ]
        },
        {
          "required": [
            "colorBalance"
          ]
        }
      ],
      "properties": {
        "brightnessContrast": {
          "$ref": "adjustments.schema.json#/definitions/brightness_contrast"
        },
        "exposure": {
          "$ref": "adjustments.schema.json#/definitions/exposure"
        },
        "hueSaturation": {
          "$ref": "adjustments.schema.json#/definitions/hue_saturation"
        },
        "colorBalance": {
          "$ref": "adjustments.schema.json#/definitions/color_balance"
        }
      }
    },
    "children": {
      "type": "array",
      "minItems": 1,
      "description": "any layers that are children of the current layer (part of the tree representation of grouped layers in PS)"
    },
    "delete": {
      "type": "object",
      "description": "Indicates you want to delete the layer, identified by the id or name.",
      "maxProperties": 1,
      "properties": {
        "includeChildren": {
          "type": "boolean",
          "default": false,
          "description": "Indicates that, while deleting a group layer also delete it's children."
        }
      }
    },
    "edit": {
      "type": "object",
      "description": "Indicates you want to edit the layer identified by it's id or name. Note the block is currently empty but leaves room for futher enhancements. The layer block should than contain changes from the original manifest. If you apply it to a group layer you will be effecting the attributes of the group layer itself, not the child layers.",
      "maxProperties": 0
    },
    "id": {
      "type": "integer",
      "description": "The layer id",
      "example": 110
    },
    "index": {
      "type": "integer",
      "description": "the z-index"
    },
    "insertAttrs": {
      "minProperties": 1,
      "oneOf": [
        {
          "required": [
            "insertAbove"
          ]
        },
        {
          "required": [
            "insertBelow"
          ]
        },
        {
          "required": [
            "insertBottom"
          ]
        },
        {
          "required": [
            "insertInto"
          ]
        },
        {
          "required": [
            "insertTop"
          ]
        }
      ],
      "properties": {
        "insertAbove": {
          "type": "object",
          "description": "Used to place the layer above another. If the layer indicated is a group layer than the layer will be inserted above the group layer.",
          "minProperties": 1,
          "$ref": "#/definitions/layerlocator"
        },
        "insertBelow": {
          "type": "object",
          "description": "Used to place the layer below another. If the layer indicated is a group layer than the layer will be inserted below (and outside of) the group layer.",
          "minProperties": 1,
          "$ref": "#/definitions/layerlocator"
        },
        "insertInto": {
          "type": "object",
          "description": "Used to insert the layer inside of a group. Useful when you need to place a layer into an empty group.",
          "minProperties": 1,
          "$ref": "#/definitions/layerlocator"
        },
        "insertTop": {
          "type": "boolean",
          "description": "Indicates that the layer should be added at the top of the layer stack."
        },
        "insertBottom": {
          "type": "boolean",
          "description": "Indicates that the layer should be added at the bottom of the layer stack. If the image has a background image than the new layer will be inserted above it instead."
        }
      }
    },
    "layerlocator": {
      "oneOf": [
        {
          "required": [
            "id"
          ]
        },
        {
          "required": [
            "name"
          ]
        }
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "The id of the layer you want to insert. Use either id OR name."
        },
        "name": {
          "type": "string",
          "description": "The name of the layer you want to insert . Use either id OR name"
        }
      }
    },
    "locked": {
      "type": "boolean",
      "description": "Is the layer editable"
    },
    "mask": {
      "type": "object",
      "minItems": 1,
      "description": "indicates this mask is applied or edited to this layer ",
      "properties": {
        "input": {
          "$ref": "file_input.schema.json#/definitions/input_object"
        },
        "linked": {
          "type": "boolean",
          "description": "indicates a mask is linked to the layer or not"
        },
        "enabled": {
          "type": "boolean",
          "description": "indicates a mask is enabled on that layer or not"
        },
        "offset": {
          "type": "object",
          "minProperties": 1,
          "anyOf": [
            {
              "required": [
                "x"
              ]
            },
            {
              "required": [
                "y"
              ]
            }
          ],
          "description": "offset settings",
          "properties": {
            "x": {
              "type": "integer",
              "description": "Offset to indicate horizontal move of the mask"
            },
            "y": {
              "type": "integer",
              "description": "Offset to indicate vertical move of the mask"
            }
          }
        },
        "clip": {
          "type": "boolean",
          "description": "Is the layer a clipped layer"
        }
      }
    },
    "move": {
      "type": "object",
      "description": "Inidicates you want to move new layer identified by it's id or name. You must also indicate where you want to insert the layer by supplying one of the attributes `insertAbove`, `insertBelow`, `insertInto`, `insertTop` or `insertBottom`. After successful completion of this async request please call layers.read again in order to get a refreshed manifest with the latest layer indexes and any new layer id's. Currently supported layer types available for add are 'layer,', 'textLayer', 'adjustmentLayer'",
      "$ref": "#/definitions/insertAttrs"
    },
    "name": {
      "type": "string",
      "description": "The layer name. You can identify a layer by id or name. That makes either id or name a required field.",
      "example": "My Layer"
    },
    "visible":{
      "type": "boolean",
      "description": "Is the layer visible",
      "default" : true
    },
    "smart_object": {
      "type": "object",
      "minItems": 1,
      "description": "indicates the attributes to create or edit a smart object layer",
      "properties": {
        "linked": {
          "type": "boolean",
          "description": "indicates if the smart object is a linked smart object or an embedded smart object",
          "default": "false"
        }
      }
    },
    "fill": {
      "type": "object",
      "minItems": 1,
      "minProperties": 1,
      "description": "indicates the attributes to create or edit a fill layer",
      "properties": {
        "solidColor": {
          "type": "object",
          "minProperties": 1,
          "anyOf": [
            {
              "required": [
                "rgb"
              ]
            }
          ],
          "properties": {
            "rgb": {
              "type": "object",
              "minProperties": 1,
              "anyOf": [
                {
                  "required": [
                    "red"
                  ]
                },
                {
                  "required": [
                    "green"
                  ]
                },
                {
                  "required": [
                    "blue"
                  ]
                }
              ],
              "description": "Color in 8 bit rgb format",
              "properties": {
                "red": {
                  "type": "integer",
                  "description": "the color red value",
                  "minimum": 0,
                  "maximum": 255
                },
                "green": {
                  "type": "integer",
                  "description": "the color green value",
                  "minimum": 0,
                  "maximum": 255
                },
                "blue": {
                  "type": "integer",
                  "description": "the color blue value",
                  "minimum": 0,
                  "maximum": 255
                }
              }
            }
          }
        }
      }
    },
    "text": {
      "$ref": "text.schema.json#/definitions/text"
    },
    "type": {
      "type": "string",
      "enum": [
        "layer",
        "textLayer",
        "adjustmentLayer",
        "layerSection",
        "smartObject",
        "fillLayer",
        "backgroundLayer"
      ],
      "properties": {
        "linked": {
          "type": "boolean",
          "description": "indicates if the smart object is a linked smart object or an embedded smart object",
          "default": "false"
        },
        "type": {
          "description": "desired image format for the smart object. 'image/vnd.adobe.photoshop' specifies a PSD file",
          "enum": [
            "image/jpeg",
            "image/png",
            "image/tiff",
            "image/vnd.adobe.photoshop",
            "vnd.adobe.photoshop"
          ],
          "type": "string"
        }
      }
    },
    "blendOptions": {
      "type": "object",
      "description": "blend options, including opacity and blend mode",
      "minProperties": 1,
      "properties": {
        "opacity": {
          "type": "integer",
          "description": "opacity value",
          "minimum": 0,
          "maximum": 100
        },
        "blendMode": {
          "type": "string",
          "description": "blend mode",
          "enum": [
            "normal",
            "dissolve",
            "darken",
            "multiply",
            "colorBurn",
            "linearBurn",
            "darkerColor",
            "lighten",
            "screen",
            "colorDodge",
            "linearDodge",
            "lighterColor",
            "overlay",
            "softLight",
            "hardLight",
            "vividLight",
            "linearLight",
            "pinLight",
            "hardMix",
            "difference",
            "exclusion",
            "subtract",
            "divide",
            "hue",
            "saturation",
            "color",
            "luminosity"
          ]
        }
      }
    },
    "fill_to_canvas": {
      "type": "boolean",
      "description": "Indicates if the pixels need to proportionally fill into the entire canvas of the document",
      "default": "false"
    },
    "horizontal_align": {
      "type": "string",
      "description": "Indicates the relative horizontal position of the layer with respect to the canvas of the document",
      "enum": [
        "left",
        "center",
        "right"
      ]
    },
    "vertical_align": {
      "type": "string",
      "description": "Indicates the relative vertical position of the layer with respect to the canvas of the document",
      "enum": [
        "top",
        "center",
        "bottom"
      ]
    }
  }
}
