{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "layers.schema.json",
  "title": "layer objects",
  "definitions": {
    "layer_objects": {
      "type": "array",
      "minItems": 1,
      "description": "Array of layer objects. An array of layer objects you wish to act upon (edit, add, delete, move). Any layer missing an `edit`, `add`, `move` or `delete` block will be ignored.",
      "items": {
        "$ref": "#/definitions/layer_object"
      }
    },
    "layer_object": {
      "type": "object",
      "minProperties": 1,
      "properties": {
        "id": {
          "$ref": "#/definitions/id"
        },
        "name": {
          "$ref": "#/definitions/name"
        },
        "index": {
          "$ref": "#/definitions/index"
        },
        "bounds": {
          "$ref": "bounds.schema.json#/definitions/bounds"
        },
        "input": {
          "$ref": "file_input.schema.json#/definitions/input_object",
          "description": "An object describing the input file to add or replace for a Pixel or Embedded Smart Object layer. Supported image types are PNG or JPEG."
        },
        "locked": {
          "$ref": "#/definitions/locked"
        },
        "visible": {
          "$ref": "#/definitions/visible"
        },
        "mask": {
          "$ref": "#/definitions/mask"
        },
        "edit": {
          "$ref": "#/definitions/edit"
        },
        "move": {
          "$ref": "#/definitions/move"
        },
        "add": {
          "$ref": "#/definitions/add"
        },
        "delete": {
          "$ref": "#/definitions/delete"
        },
        "type": {
          "$ref": "#/definitions/type"
        },
        "adjustments": {
          "$ref": "#/definitions/adjustments"
        },
        "smartObject": {
          "$ref": "#/definitions/smart_object"
        },
        "text": {
          "$ref": "#/definitions/text"
        },
        "blendOptions": {
          "$ref": "#/definitions/blendOptions"
        },
        "fill": {
          "$ref": "#/definitions/fill"
        },
        "fillToCanvas": {
          "$ref": "#/definitions/fill_to_canvas"
        },
        "horizontalAlign": {
          "$ref": "#/definitions/horizontal_align"
        },
        "verticalAlign": {
          "$ref": "#/definitions/vertical_align"
        },
        "children": {
          "$ref": "#/definitions/children"
        }
      },
      "allOf": [{
          "if": {
            "properties": {
              "edit": {
                "$ref": "#/definitions/edit"
              },
              "move": {
                "$ref": "#/definitions/move"
              }
            },
            "oneOf": [{
                "required": [
                  "edit"
                ]
              },
              {
                "required": [
                  "move"
                ]
              }
            ]
          },
          "then": {
            "allOf": [{
                "if": {
                  "properties": {
                    "type": {
                      "enum": [
                        "adjustmentLayer"
                      ]
                    }
                  },
                  "required": [
                    "type"
                  ]
                },
                "then": {
                  "required": [
                    "adjustments"
                  ]
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "enum": [
                        "layer",
                        "smartObject"
                      ]
                    }
                  },
                  "required": [
                    "type"
                  ]
                }
              }
            ],
            "anyOf": [{
                "required": [
                  "id"
                ]
              },
              {
                "required": [
                  "name"
                ]
              }
            ]
          }
        },
        {
          "if": {
            "properties": {
              "add": {
                "$ref": "#/definitions/add"
              }
            },
            "required": [
              "add"
            ]
          },
          "then": {
            "if": {
              "properties": {
                "type": {
                  "enum": [
                    "adjustmentLayer"
                  ]
                }
              }
            },
            "then": {
              "required": [
                "adjustments"
              ]
            }
          }
        },
        {
          "if": {
            "properties": {
              "delete": {
                "$ref": "#/definitions/delete"
              }
            },
            "required": [
              "delete"
            ]
          },
          "then": {
            "properties": {
              "id": {
                "$ref": "#/definitions/id"
              },
              "name": {
                "$ref": "#/definitions/name"
              }
            },
            "anyOf": [{
                "required": [
                  "id"
                ]
              },
              {
                "required": [
                  "name"
                ]
              }
            ]
          }
        }
      ]
    },
    "add": {
      "type": "object",
      "description": "Inidicates you want to add a new layer. You must also indicate where you want to insert the new layer by supplying one of the attributes `insertAbove`, `insertBelow`, `insertInto`, `insertTop` or `insertBottom`. Currently supported layer types available for add are 'layer,', 'textLayer', 'adjustmentLayer'",
      "$ref": "#/definitions/insertAttrs"
    },
    "adjustments": {
      "type": "object",
      "description": "Supported adjustment layer attributes. Any of `brightnessContrast`, `exposure`, `hueSaturation` or `colorBalance` is required",
      "minProperties": 1,
      "anyOf": [{
        "properties": {
          "brightnessContrast": {
            "$ref": "adjustments.schema.json#/definitions/brightness_contrast"
          },
          "exposure": {
            "$ref": "adjustments.schema.json#/definitions/exposure"
          },
          "hueSaturation": {
            "$ref": "adjustments.schema.json#/definitions/hue_saturation"
          },
          "colorBalance": {
            "$ref": "adjustments.schema.json#/definitions/color_balance"
          }
        }
      }]
    },
    "children": {
      "type": "array",
      "minItems": 1,
      "description": "An array of nested layer objects. Only layerSections (group layers) can include children"
    },
    "delete": {
      "type": "object",
      "description": "Indicates you want to delete the layer, identified by the id or name. Note the object is currently empty but leaves room for futher enhancements.",
      "maxProperties": 1,
      "properties": {
        "includeChildren": {
          "type": "boolean",
          "default": false,
          "description": "Indicates that, while deleting a group layer also delete it's children."
        },
        "id": {
          "$ref": "#/definitions/id"
        },
        "name": {
          "$ref": "#/definitions/name"
        }
      }
    },
    "edit": {
      "type": "object",
      "description": "Indicates you want to edit the layer identified by it's id or name. Note the block is currently empty but leaves room for futher enhancements. The layer block should than contain changes from the original manifest. If you apply it to a group layer you will be effecting the attributes of the group layer itself, not the child layers.",
      "maxProperties": 0
    },
    "id": {
      "type": "integer",
      "description": "The layer id",
      "example": 110
    },
    "index": {
      "type": "integer",
      "description": "The z-index"
    },
    "insertAttrs": {
      "minProperties": 1,
      "anyOf": [{
        "properties": {
          "insertAbove": {
            "type": "object",
            "description": "Used to place the layer above another. If the layer indicated is a group layer than the layer will be inserted above the group layer. Any of `id` or `name` is required.",
            "minProperties": 1,
            "anyOf": [{
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "The id of the layer you want to insert. Use either id OR name."
                },
                "name": {
                  "type": "string",
                  "description": "The name of the layer you want to insert . Use either id OR name"
                }
              }
            }]
          },
          "insertBelow": {
            "type": "object",
            "description": "Used to place the layer below another. If the layer indicated is a group layer than the layer will be inserted below (and outside of) the group layer. Any of `id` or `name` is required.",
            "minProperties": 1,
            "anyOf": [{
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "The id of the layer you want to insert. Use either id OR name."
                },
                "name": {
                  "type": "string",
                  "description": "The name of the layer you want to insert . Use either id OR name"
                }
              }
            }]
          },
          "insertInto": {
            "type": "object",
            "description": "Used to insert the layer inside of a group. Useful when you need to place a layer into an empty group.",
            "minProperties": 1,
            "$ref": "#/definitions/layerlocator"
          },
          "insertTop": {
            "type": "boolean",
            "description": "Indicates that the layer should be added at the top of the layer stack."
          },
          "insertBottom": {
            "type": "boolean",
            "description": "Indicates that the layer should be added at the bottom of the layer stack. If the image has a background image than the new layer will be inserted above it instead."
          }
        }
      }]
    },
    "layerlocator": {
      "anyOf": [{
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the layer you want to edit or add. Use either id OR name."
          },
          "name": {
            "type": "string",
            "description": "The name of the layer you want to edit or add . Use either id OR name"
          }
        }
      }]
    },
    "locked": {
      "type": "boolean",
      "description": "Is the layer editable"
    },
    "mask": {
      "type": "object",
      "minItems": 1,
      "description": "An object describing the input mask to be added or replaced. Supported mask type is Layer Mask. The input file must be a greyscale image. Supported file types are `jpeg`, `png` and `psd`.",
      "properties": {
        "input": {
          "$ref": "file_input.schema.json#/definitions/input_object",
          "description": "An object describing the input grayscale file to add or replace for a mask. Supported image types are PNG or JPEG or PSD."
        },
        "linked": {
          "type": "boolean",
          "description": "Indicates a mask is linked to the layer or not",
          "default": true
        },
        "enabled": {
          "type": "boolean",
          "description": "Indicates a mask is enabled on that layer or not",
          "default": true
        },
        "offset": {
          "type": "object",
          "minProperties": 1,
          "anyOf": [{
            "properties": {
              "x": {
                "type": "integer",
                "description": "Offset to indicate horizontal move of the mask",
                "default": 0
              },
              "y": {
                "type": "integer",
                "description": "Offset to indicate vertical move of the mask",
                "default": 0
              }
            }
          }],
          "description": "An object to specify mask offset on the layer. Any of `x` or `y` is required"
        },
        "clip": {
          "type": "boolean",
          "description": "Indicates if this is a clipped layer. A layer can't be clipped if it is the bottommost layer, a start/end of a layer set, or if base turns out to be end of group."
        }
      }
    },
    "move": {
      "type": "object",
      "description": "Inidicates you want to move new layer identified by it's id or name. You must also indicate where you want to insert the layer by supplying one of the attributes `insertAbove`, `insertBelow`, `insertInto`, `insertTop` or `insertBottom`.",
      "minProperties": 1,
      "$ref": "#/definitions/insertAttrs"
    },
    "name": {
      "type": "string",
      "description": "The layer name. You can identify a layer by id or name. That makes either id or name a required field.",
      "example": "My Layer"
    },
    "visible": {
      "type": "boolean",
      "description": "Is the layer visible",
      "default": true
    },
    "smart_object": {
      "type": "object",
      "minItems": 1,
      "description": "Indicates the attributes to create or edit a smart object layer",
      "properties": {
        "linked": {
          "type": "boolean",
          "description": "Indicates if the smart object is a linked smart object or an embedded smart object",
          "default": "false"
        }
      }
    },
    "fill": {
      "type": "object",
      "minItems": 1,
      "minProperties": 1,
      "description": "An object describing the attributes specific to creating or editing a fill layer.",
      "properties": {
        "solidColor": {
          "type": "object",
          "description": "An object describing the solid color fill for this fill layer. Currently supported mode is RGB only.",
          "minProperties": 1,
          "required": ["rgb"],
          "properties": {
            "rgb": {
              "type": "object",
              "minProperties": 1,
              "anyOf": [{
                "properties": {
                  "red": {
                    "type": "integer",
                    "description": "The color red value",
                    "minimum": 0,
                    "maximum": 255
                  },
                  "green": {
                    "type": "integer",
                    "description": "The color green value",
                    "minimum": 0,
                    "maximum": 255
                  },
                  "blue": {
                    "type": "integer",
                    "description": "The color blue value",
                    "minimum": 0,
                    "maximum": 255
                  }
                }
              }],
              "description": "Color in 8 bit rgb format"
            }
          }
        }
      }
    },
    "text": {
      "$ref": "text.schema.json#/definitions/text"
    },
    "type": {
      "type": "string",
      "description": "Supported layer types.",
      "enum": [
        "layer",
        "textLayer",
        "adjustmentLayer",
        "layerSection",
        "smartObject",
        "fillLayer",
        "backgroundLayer"
      ]
    },
    "blendOptions": {
      "type": "object",
      "description": "Blend options, including opacity and blend mode",
      "minProperties": 1,
      "properties": {
        "opacity": {
          "type": "integer",
          "description": "opacity value",
          "minimum": 0,
          "maximum": 100
        },
        "blendMode": {
          "type": "string",
          "description": "Blend mode of a layer",
          "enum": [
            "normal",
            "dissolve",
            "darken",
            "multiply",
            "colorBurn",
            "linearBurn",
            "darkerColor",
            "lighten",
            "screen",
            "colorDodge",
            "linearDodge",
            "lighterColor",
            "overlay",
            "softLight",
            "hardLight",
            "vividLight",
            "linearLight",
            "pinLight",
            "hardMix",
            "difference",
            "exclusion",
            "subtract",
            "divide",
            "hue",
            "saturation",
            "color",
            "luminosity"
          ]
        }
      }
    },
    "fill_to_canvas": {
      "type": "boolean",
      "description": "Indicates if the pixels need to proportionally fill into the entire canvas of the document",
      "default": "false"
    },
    "horizontal_align": {
      "type": "string",
      "description": "Indicates the relative horizontal position of the layer with respect to the canvas of the document",
      "enum": [
        "left",
        "center",
        "right"
      ]
    },
    "vertical_align": {
      "type": "string",
      "description": "Indicates the relative vertical position of the layer with respect to the canvas of the document",
      "enum": [
        "top",
        "center",
        "bottom"
      ]
    }
  }
}
