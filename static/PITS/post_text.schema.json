{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "post_text.schema.json",
  "title": "post_text",
  "description": "Initiates an asynchronous job to add/edit one more text layers in a PSD document.",
  "definitions": {
    "character_styles": {
      "type": "array",
      "minItems": 1,
      "description": "Array of character_style objects. Any of the `characterStyles` property is required.",
      "items": {
        "$ref": "#/definitions/character_style"
      }
    },
    "character_style": {
      "type": "object",
      "description": "character style settings",
      "minProperties": 1,
      "properties": {
        "size": {
          "type": "number",
          "description": "The font size, in pixels",
          "minimum": 0.04,
          "maximum": 5400
        },
        "fontPostScriptName": {
          "type": "string",
          "description": "the font's postscript name to be used to set the font for this layer."
        },
        "color": {
          "type": "object",
          "required": [
            "red",
            "green",
            "blue"
          ],
          "description": "FontColor in rgb format",
          "properties": {
            "red": {
              "type": "integer",
              "description": "The color red value",
              "minimum": 0,
              "maximum": 65535
            },
            "green": {
              "type": "integer",
              "description": "The color green value",
              "minimum": 0,
              "maximum": 65535
            },
            "blue": {
              "type": "integer",
              "description": "The color blue value",
              "minimum": 0,
              "maximum": 65535
            }
          }
        },
        "leading": {
          "type": "number",
          "description": "The font's leading value, where leading is the distance between each line of text."
        },
        "tracking": {
          "type": "number",
          "description": "The font's tracking value, where tracking is the horizontal spacing between a range of characters."
        },
        "baseline": {
          "type": "string",
          "description": "Indicates if the text is raised or lowered in relation to a fontâ€™s baseline",
          "enum": ["subScript", "superScript"]
        },
        "fontCaps": {
          "type": "string",
          "description": "The text's capitalization values",
          "enum": ["allCaps", "smallCaps"]
        },
        "autoKern": {
          "type": "string",
          "description": "The text's kerning setting. Optical: set based on the shape of the font. Metrics: uses kern pairs included in fonts",
          "enum": ["opticalKern", "metricsKern"]
        },
        "strikethrough": {
          "type": "boolean",
          "description": "Toggle strikethrough for selected text"
        },
        "syntheticBold": {
          "type": "boolean",
          "description": "Toggle bold for selected text"
        },
        "syntheticItalic": {
          "type": "boolean",
          "description": "Toggle italic for selected text"
        },
        "underline": {
          "type": "boolean",
          "description": "Toggle underlining of text"
        },
        "ligature": {
          "type": "boolean",
          "description": "Toggle text ligature, which are special characters in a font that combine two (or more)"
        },
        "fractions": {
          "type": "boolean",
          "description": "Toggle automatic formatting of fractions: numbers separated by a slash (such as 1/2)"
        },
        "stylisticAlternates": {
          "type": "boolean",
          "description": "Toggle stylisticAlternates, which formats stylized characters that create a purely aesthetic effect"
        },
        "verticalScale": {
          "type": "number",
          "description": "The amount of vertical scaling to apply to the font",
          "minimum": 0,
          "maximum": 1000
        },
        "horizontalScale": {
          "type": "number",
          "description": "The amount of horizontal scaling to apply to the font",
          "minimum": 0,
          "maximum": 1000
        }
      },
      "additionalProperties": false
    },
    "paragraph_styles": {
      "type": "array",
      "minItems": 1,
      "description": "Array of paragraph_style objects. Any of the `paragraphStyles` properties is required.",
      "items": {
        "$ref": "#/definitions/paragraph_style"
      }
    },
    "paragraph_style": {
      "type": "object",
      "minProperties": 1,
      "description": "Paragraph style settings",
      "properties": {
        "align": {
          "type": "string",
          "description": "The paragraph alignment (deprecated, please use alignment)",
          "enum": ["left", "center", "right", "justify", "justifyLeft", "justifyCenter", "justifyRight", "justifyAll"]
        },
        "alignment": {
          "type": "string",
          "description": "The paragraph alignment",
          "enum": ["left", "center", "right", "justify", "justifyLeft", "justifyCenter", "justifyRight", "justifyAll"]
        },
        "startIndent": {
          "type": "number",
          "description": "The amount of indent to add to the left margin"
        },
        "endIndent": {
          "type": "number",
          "description": "The amount of indent to add to the right margin"
        },
        "hyphenate": {
          "type": "boolean",
          "description": "Toggle hyphenate for paragraph text"
        },
        "firstLineIndent": {
          "type": "number",
          "description": "The amount of indent to add to the first line of the paragraph"
        },
        "spaceBefore": {
          "type": "number",
          "description": "The amount of space to add before the paragraph"
        },
        "spaceAfter": {
          "type": "number",
          "description": "The amount of inspace to add after the paragraph"
        }
      },
      "additionalProperties": false
    }
  },
  "type": "object",
  "required": [
    "inputs",
    "options",
    "outputs"
  ],
  "properties": {
    "inputs": {
      "$ref": "file_input.schema.json#/definitions/input_objects_max_1"
    },
    "options": {
      "type": "object",
      "minProperties": 1,
      "required": ["layers"],
      "description": "User can update properties related to text layers and fonts using options block",
      "allOf": [{
        "properties": {
          "manageMissingFonts": {
            "enum": [
              "fail",
              "useDefault"
            ],
            "description": "Action to take if there are one or more missing fonts in the document. If not provided it takes the default font."
          },
          "globalFont": {
            "type": "string",
            "description": "The full postscript name of the font to be used as the global default for the document. This font will be used for any text layer which has a missing font and no other font has been specifically provided for that layer. If this font itself is missing, the option specified for manageMissingFonts from above will take effect."
          },
          "fonts": {
            "$ref": "file_input.schema.json#/definitions/input_objects",
            "description": "An array of hashes describing the input files to edit. each input object will be either `external`, `adobe`, `azure` or `dropbox`"
          },
          "layers": {
            "type": "array",
            "minItems": 1,
            "description": "Array of text layer objects you wish to act upon",
            "items": {
              "type": "object",
              "allOf": [{
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the layer you want to insert. Use either id OR name"
                  },
                  "id": {
                    "type": "integer",
                    "description": "The id of the layer you want to insert. Use either id OR name."
                  },
                  "bounds": {
                    "$ref": "bounds.schema.json#/definitions/bounds"
                  },
                  "locked": {
                    "type": "boolean",
                    "description": "Is the layer editable"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Is the layer visible"
                  },
                  "text": {
                    "type": "object",
                    "description": "Supported text layer attributes.",
                    "minProperties": 1,
                    "properties": {
                      "contents": {
                        "type": "string",
                        "description": "The contents of the text layer (deprecated, please use content)"
                      },
                      "content": {
                        "type": "string",
                        "description": "The content of the text layer"
                      },
                      "orientation": {
                        "type": "string",
                        "description": "The text's orientation",
                        "enum": ["horizontal", "vertical"]
                      },
                      "rotate": {
                        "type": "integer",
                        "description": "The text's rotation in angle",
                        "minimum": -180,
                        "maximum": 180
                      },
                      "antiAlias": {
                        "type": "string",
                        "description": "The text's aliasing type which determines the smoothness of the jagged edges of the text.",
                        "enum": ["antiAliasNone", "antiAliasSharp", "antiAliasCrisp", "antiAliasStrong", "antiAliasSmooth", "antiAliasPlatformLCD", "antiAliasPlatformGray"]
                      },
                      "eastAsianFeatures": {
                        "type": "object",
                        "description": "Text features specifically for eastAsian languages",
                        "minProperties": 1,
                        "properties": {
                          "textStyle": {
                            "type": "string",
                            "description": "Base line direction for text style",
                            "enum": ["cross", "rotated", "withSream"]
                          }
                        }
                      },
                      "characterStyles": {
                        "$ref": "#/definitions/character_styles"
                      },
                      "paragraphStyles": {
                        "$ref": "#/definitions/paragraph_styles"
                      },
                      "textType": {
                        "type": "string",
                        "description": "The type of text's contents, point or paragraph",
                        "enum": ["point", "paragraph"]
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }],
              "oneOf": [{
                  "required": [
                    "name"
                  ]
                },
                {
                  "required": [
                    "id"
                  ]
                }
              ]
            }
          }
        },
        "additionalProperties": false
      }]
    },
    "outputs": {
      "$ref": "file_output_pegasus.schema.json#/definitions/output_objects"
    }
  }
}
