{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "outputs.schema.json",
  "title": "a file output obect",
  "description": "Represents the collective fields needed to indicate an output file, destination and format",
  "definitions": {
    "output": {
      "type": "object",
      "description": "An object describing the requested file outputs (a new psd file or supported renditions)",
      "required": [
        "href",
        "storage",
        "type"
      ],
      "properties": {
        "storage": {
          "$ref": "inputs.schema.json#/definitions/storage"
        },
        "href": {
          "$ref": "inputs.schema.json#/definitions/href"
        },
        "type": {
          "description": "Desired output image format",
          "enum": [
            "image/jpeg",
            "image/x-adobe-dng",
            "image/png",
            "application/rdf+xml"
          ],
          "type": "string"
        },
        "overwrite": {
          "description": "If the output file already exists should it be overwritten.`overwrite` flag is used only when `storage = \"adobe\"`",
          "type": "boolean",
          "default": true
        },
        "quality": {
          "description": "Quality of the JPEG outputs (will be ignored for other output types). Ranges from 0 to 12, with 12 as the highest quality.",
          "type": "number",
          "default": 12,
          "minimum": 0,
          "maximum": 12
        }
      },
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "pattern": "image/jpeg"
              }
            }
          },
          "then": {
            "properties": {
              "quality": {
                "description": "Desired JPEG image quality, integers range from 0 to 12",
                "type": "number",
                "minimum": 0,
                "maximum": 12
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "storage": {
                "pattern": "(^azure|external|dropbox$)",
                "description": "Asset stored on an external service (like AWS S3, Azure, Dropbox etc.). If you are using presigned url for dropbox or azure, use `storage=\"dropbox\"` or `storage=\"azure\"` else it is `storage=\"external\"`"
              }
            }
          },
          "then": {
            "properties": {
              "href": {
                "format": "uri",
                "pattern": "^https://",
                "description": "Any public url or a presignedURL for the asset output"
              }
            }
          },
          "else": {
            "properties": {
              "href": {
                "pattern": "^/?(temp|cloud-content|assets|pubs)/.*",
                "description": "A string representing the path to the output file stored on Adobe's cloud.</br> Not available for the integrations created with JWT authentication or Service Principle."
              },
              "storage": {
                "description" : "Asset stored on Adobe's cloud `adobe`. </br> Not available for the integrations created with JWT authentication or Service Principle."
              }
            }
          }
        }
      ]
    },
    "outputs": {
      "type": "array",
      "minItems": 1,
      "maxItems": 25,
      "description": "An array of output objects. each output object will be either 'external' or 'adobe'. Maximum limit to generate output files in one API call is 25.",
      "items": {
        "$ref": "#/definitions/output"
      }
    }
  }
}
