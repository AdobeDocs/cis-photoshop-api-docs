{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/code-sample/index.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-code-sample-index-md-c3e8cf65bcbf1b055323.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/cis-photoshop-api-docs/cis-photoshop-api-docs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"example-code\"\n    }}>{`Example Code`}</h1>\n    <h2 {...{\n      \"id\": \"photoshop\"\n    }}>{`Photoshop`}</h2>\n    <p>{`The code snippets are using one of our `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/AdobeDocs/cis-photoshop-api-docs-pre-release/blob/main/sample_files/Example.psd\"\n      }}>{`sample psd`}</a>{` files. Please feel free to download and use it for testing. Just remember you will need to have this file stored in one of the accepted external storage. For more information on storage please refer to the `}<a parentName=\"p\" {...{\n        \"href\": \"../../photoshop#input-and-output-file-storage\"\n      }}>{`File Storage`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"example-1-smartobject\"\n    }}>{`Example 1: /smartObject`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`/smartObject`}</inlineCode>{` endpoint can take an input PSD file with an embedded smartobject and can replace with another smartobject.\nThis API is a simple API developed to ease the smartObject replacement workflow for an user.`}</p>\n    <h4 {...{\n      \"id\": \"sample-1-replacing-a-smartobject\"\n    }}>{`Sample 1: Replacing a SmartObject`}</h4>\n    <p>{`This example shows how you can replace an embedded smart object`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`curl - H \"Authorization: Bearer $token\" \\\\\n- H \"x-api-key: $api_key\" \\\\\n- X POST \\\\\nhttps: //image.adobe.io/pie/psdService/smartObject \\\\\n- d '{\n  \"inputs\": [\n  {\n    \"href\": \"<SIGNED_GET_URL>\",\n    \"storage\": \"external\"\n  }],\n  \"options\": {\n    \"layers\": [{\n      \"name\": \"HeroImage\",\n      \"input\": {\n        \"href\": \"<SIGNED_GET_URL>\",\n        \"storage\": \"external\"\n      }\n     }\n    ]\n  },\n  \"outputs\": [\n  {\n    \"storage\": \"external\",\n    \"href\": \"<SIGNED_PUT_URL>\",\n    \"type\": \"vnd.adobe.photoshop\"\n  }\n]}'\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-2-creating-a-smartobject\"\n    }}>{`Sample 2: Creating a SmartObject`}</h4>\n    <p>{`This example shows how you can create an embedded smart object`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`curl - H \"Authorization: Bearer $token\" \\\\\n- H \"x-api-key: $api_key\" \\\\\n- X POST \\\\\nhttps: //image.adobe.io/pie/psdService/smartObject\n- d '{\n  \"inputs\": [\n  {\n    \"href\": \"<SIGNED_GET_URL>\",\n    \"storage\": \"external\"\n  }],\n  \"options\": {\n    \"layers\": [{\n      \"name\": \"New\",\n      \"add\": {\n        \"insertTop\": true\n      },\n      \"input\": {\n        \"href\": \"<SIGNED_GET_URL>\",\n        \"storage\": \"external\"\n       }\n      }\n    ]\n  },\n  \"outputs\": [\n  {\n    \"storage\": \"external\",\n    \"href\": \"<SIGNED_PUT_URL>\",\n    \"type\": \"vnd.adobe.photoshop\"\n  }\n]}'\n`}</code></pre>\n    <p>{`A call to this API initiates an asynchronous job and returns a response containing an href. Use the value in the href to poll for the status of the job. This is illustrated in `}<a parentName=\"p\" {...{\n        \"href\": \"#example-6-fetch-the-status\"\n      }}>{`Example 6`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"example-2-documentoperations\"\n    }}>{`Example 2: /documentOperations`}</h3>\n    <p>{`This example section will provide information and samples to demonstrate the use of `}<inlineCode parentName=\"p\">{`/documentOperations`}</inlineCode>{` API to work with Text Layers in particular.\nPlease refer to the `}<a parentName=\"p\" {...{\n        \"href\": \"../supported-features/#the-add-edit-and-delete-objects\"\n      }}>{`The add, edit and delete objects`}</a>{` section for more information on how to apply these operations on a text layer.`}</p>\n    <h4 {...{\n      \"id\": \"sample-1-making-a-text-layer-edit\"\n    }}>{`Sample 1: Making a text layer edit`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`curl -X POST \\\\\n  https://image.adobe.io/pie/psdService/documentOperations \\\\\n  -H \"Authorization: Bearer $token\"  \\\\\n  -H \"x-api-key: $apiKey\" \\\\\n  -d '{\n  \"inputs\":[\n    {\n      \"href\":\"<SIGNED_GET_URL>\",\n      \"storage\":\"external\"\n    }\n  ],\n  \"options\":{\n    \"layers\":[\n      {\n        \"name\": \"My Text Layer\",\n        \"type\": \"textLayer\",\n        \"text\": {\n            \"content\": \"CHANGED TO NEW TEXT\",\n            \"characterStyles\": [{\n                \"fontSize\": 15,\n                \"orientation\": \"horizontal\",\n                \"fontColor\": {\n                    \"rgb\":{\n                       \"red\":26086,\n                       \"green\":23002,\n                       \"blue\":8224\n                    }\n                }\n            }],\n            \"paragraphStyles\": [{\n              \"alignment\": \"right\"\n            }]\n        },\n        \"edit\": {}\n      }\n    ]\n  },\n  \"outputs\":[\n    {\n      \"href\":\"<SIGNED_POST_URL>\",\n      \"storage\":\"external\",\n      \"type\":\"vnd.adobe.photoshop\",\n      \"overwrite\":true\n    }\n  ]\n}'\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-2-custom-font-in-a-text-layer\"\n    }}>{`Sample 2: Custom font in a text layer`}</h4>\n    <p>{`This will change the font in a text layer named `}<inlineCode parentName=\"p\">{`My Text Layer`}</inlineCode>{` to a custom font `}<inlineCode parentName=\"p\">{`VeganStylePersonalUse`}</inlineCode>{`.\n`}<strong parentName=\"p\">{`Note`}</strong>{`: the value for the `}<inlineCode parentName=\"p\">{`fontName`}</inlineCode>{` field in the `}<inlineCode parentName=\"p\">{`text.characterStyles`}</inlineCode>{` section is the full postscript name of the custom font.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`curl -X POST \\\\\n  https://image.adobe.io/pie/psdService/documentOperations \\\\\n  -H \"Authorization: Bearer $token\"  \\\\\n  -H \"x-api-key: $apiKey\" \\\\\n  -d '{\n  \"inputs\":[\n    {\n      \"href\":\"<SIGNED_GET_URL>\",\n      \"storage\":\"external\"\n    }\n  ],\n  \"options\":{\n    \"fonts\": {\n        storage: \"external\",\n        href: \"<SIGNED_GET_URL_TO_VeganStylePersonalUse.ttf>\"\n    },\n    \"layers\":[\n      {\n        \"name\": \"My Text Layer\",\n        \"type\": \"textLayer\",\n        \"text\": {\n            \"content\": \"CHANGED TO NEW TEXT WITH NEW FONT\",\n            \"characterStyles\": [{\n                \"fontName\": \"VeganStylePersonalUse\",\n                \"orientation\": \"horizontal\",\n                \"fontColor\": {\n                    \"rgb\":{\n                       \"red\":26086,\n                       \"green\":23002,\n                       \"blue\":8224\n                    }\n                }\n            }]\n        },\n        \"edit\": {}\n      }\n    ]\n  },\n  \"outputs\":[\n    {\n      \"href\":\"<SIGNED_POST_URL>\",\n      \"storage\":\"external\",\n      \"type\":\"vnd.adobe.photoshop\",\n      \"overwrite\":true\n    }\n  ]\n}'\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-3-dictating-actions-for-missing-fonts\"\n    }}>{`Sample 3: Dictating actions for missing fonts`}</h4>\n    <p>{`In this request for example, if `}<inlineCode parentName=\"p\">{`MySampleFont`}</inlineCode>{` is not found while processing the request, the system default font (`}<inlineCode parentName=\"p\">{`ArialMT`}</inlineCode>{`) will be used as `}<inlineCode parentName=\"p\">{`manageMissingFonts`}</inlineCode>{` is set to `}<inlineCode parentName=\"p\">{`useDefault`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`curl -X POST \\\\\n  https://image.adobe.io/pie/psdService/documentOperations \\\\\n  -H \"Authorization: Bearer $token\"  \\\\\n  -H \"x-api-key: $apiKey\" \\\\\n  -d '{\n  \"inputs\":[\n    {\n      \"href\":\"<SIGNED_GET_URL>\",\n      \"storage\":\"external\"\n    }\n  ],\n  \"options\":{\n    \"manageMissingFonts\": \"useDefault\",\n    \"globalFont\": \"MySampleFont\",\n    \"fonts\": {\n        storage: \"external\",\n        href: \"<SIGNED_GET_URL_TO_VeganStylePersonalUse.ttf>\"\n    },\n    \"layers\":[\n      {\n        \"name\": \"My Text Layer\",\n        \"type\": \"textLayer\",\n        \"text\": {\n            \"content\": \"CHANGED TO NEW TEXT WITH NEW FONT\",\n            \"characterStyles\": [{\n                \"fontName\": \"VeganStylePersonalUse\",\n                \"orientation\": \"horizontal\",\n                \"fontColor\": {\n                    \"rgb\":{\n                       \"red\":26086,\n                       \"green\":23002,\n                       \"blue\":8224\n                    }\n                }\n            }]\n        },\n        \"edit\": {}\n      }\n    ]\n  },\n  \"outputs\":[\n    {\n      \"href\":\"<SIGNED_POST_URL>\",\n      \"storage\":\"external\",\n      \"type\":\"vnd.adobe.photoshop\",\n      \"overwrite\":true\n    }\n  ]\n}'\n`}</code></pre>\n    <p>{`A call to this API initiates an asynchronous job and returns a response containing an href. Use the value in the href to poll for the status of the job. This is illustrated in `}<a parentName=\"p\" {...{\n        \"href\": \"#example-6-fetch-the-status\"\n      }}>{`Example 6`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"example-3-documentoperations\"\n    }}>{`Example 3: /documentOperations`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`/documentOperations`}</inlineCode>{` API can be used to make layer and/or document level edits to your PSD and then generate new renditions with the changes. You can pass in a flat array of only the layers that you wish to act upon, in the request body's `}<inlineCode parentName=\"p\">{`options.layers`}</inlineCode>{` argument.`}</p>\n    <p>{`The layer name (or the layer id) will be used by the service to identify the correct layer to operation upon in your PSD.\nPlease refer to the `}<a parentName=\"p\" {...{\n        \"href\": \"../supported-features/#the-add-edit-and-delete-objects\"\n      }}>{`The add, edit and delete objects`}</a>{` section for more information on how to apply these operations on a layer.`}</p>\n    <h4 {...{\n      \"id\": \"sample-1-making-a-simple-edit\"\n    }}>{`Sample 1: Making a simple edit`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`curl -X POST \\\\\n  https://image.adobe.io/pie/psdService/documentOperations \\\\\n  -H \"Authorization: Bearer $token\"  \\\\\n  -H \"x-api-key: $apiKey\" \\\\\n  -d '{\n  \"inputs\":[\n    {\n      \"href\":\"<SIGNED_GET_URL>\",\n      \"storage\":\"external\"\n    }\n  ],\n  \"options\":{\n    \"layers\":[\n      {\n        \"edit\":{},     \n        \"id\":750,\n        \"index\":1,\n        \"locked\":true,\n        \"name\":\"HeroImage\",\n        \"type\":\"smartObject\",\n        \"visible\":true\n      }\n    ]\n  },\n  \"outputs\":[\n    {\n      \"href\":\"<SIGNED_POST_URL>\",\n      \"storage\":\"external\",\n      \"type\":\"vnd.adobe.photoshop\",\n      \"overwrite\":true\n    }\n  ]\n}'\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-2-creating-new-renditions\"\n    }}>{`Sample 2: Creating new Renditions`}</h4>\n    <p>{`See the `}<inlineCode parentName=\"p\">{`/renditionCreate`}</inlineCode>{` examples below as the format for the `}<inlineCode parentName=\"p\">{`outputs`}</inlineCode>{` object in the request body is identical`}</p>\n    <h4 {...{\n      \"id\": \"sample-3-swapping-the-image-in-a-smart-object-layer\"\n    }}>{`Sample 3: Swapping the image in a smart object layer`}</h4>\n    <p>{`In this example we want to swap the smart object in an existing embedded smart object layer, the Hero Image layer in Example.psd. We are requesting the following:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`edit`}</inlineCode>{` key is included to indicate we want to edit this layer`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`layers.input`}</inlineCode>{` object is included to indicate where the replacement image can be found`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`layers.smartObject`}</inlineCode>{` object is included to indicate specific information related to this image as SO`}</li>\n    </ul>\n    <p>{`All the files used in the example are available in `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/AdobeDocs/cis-photoshop-api-docs-pre-release/tree/main/sample_files\"\n      }}>{`sample_files`}</a>{`. You can download the files and put it in your CC account or any storage(AWS, Azure or Dropbox).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`curl -X POST \\\\\n  https://image.adobe.io/pie/psdService/documentOperations \\\\\n  -H \"Authorization: Bearer $token\"  \\\\\n  -H \"x-api-key: $apiKey\" \\\\\n  -d '{\n  \"inputs\":[\n    {\n      \"href\":\"<SIGNED_GET_URL>\",\n      \"storage\":\"external\"\n    }\n  ],\n  \"options\":{\n    \"layers\":[\n      {\n        \"edit\":{},     \n        \"input\":{                                       \n          \"href\":\"<SIGNED_GET_URL>\",  \n          \"storage\":\"external\"\n        },\n        \"smartObject\" : {                \n          \"type\" : \"image/png\"\n        },\n        \"attributes\":{\n          \"bounds\":{\n            \"height\":515,\n            \"left\":-385,\n            \"top\":-21,\n            \"width\":929\n          }\n        },\n        \"id\":750,\n        \"index\":1,\n        \"locked\":false,\n        \"name\":\"HeroImage\",\n        \"type\":\"smartObject\",\n        \"visible\":true\n      }\n    ]\n  },\n  \"outputs\":[\n    {\n      \"href\":\"<SIGNED_POST_URL>\",\n      \"storage\":\"external\",\n      \"type\":\"vnd.adobe.photoshop\",\n      \"overwrite\":true\n    }\n  ]\n}'\n`}</code></pre>\n    <p>{`A call to this API initiates an asynchronous job and returns a response containing an href. Use the value in the href to poll for the status of the job. This is illustrated in `}<a parentName=\"p\" {...{\n        \"href\": \"#example-6-fetch-the-status\"\n      }}>{`Example 6`}</a>{`.`}</p>\n    <h4 {...{\n      \"id\": \"sample-4-adding-a-new-adjustment-layer\"\n    }}>{`Sample 4: Adding a new adjustment layer`}</h4>\n    <p>{`This example shows how you can add a new brightnessContrast adjustment layer to the top of your PSD.  Things to note:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`NEW KEYWORD TO INDICATE AN ADDITION: The `}<inlineCode parentName=\"li\">{`add`}</inlineCode>{` key is included, along with `}<inlineCode parentName=\"li\">{`insertAbove`}</inlineCode>{` in the new layer object to indicate exactly where you want the new layer placed in the overall Manifest tree.  `}</li>\n      <li parentName=\"ul\">{`LAYER TYPE IS REQUIRED: The type indicates you want a new layer of type adjustment layer.`}</li>\n      <li parentName=\"ul\">{`LAYER ID AND INDEX ARE NOT PRESENT: The layer index and id are not supported for add operations. The index is implied by the objects position in the manifest tree and the ID will be generated by the service and returned to you in subsequent calls to `}<inlineCode parentName=\"li\">{`/documentManifest`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`curl -X POST \\\\\n  https://image.adobe.io/pie/psdService/documentOperations \\\\\n  -H 'Authorization: Bearer <auth_token>' \\\\\n  -H 'Content-Type: application/json' \\\\\n  -H 'x-api-key: <YOUR_API_KEY>' \\\\\n  -d '{\n  \"inputs\":[\n    {\n      \"href\":\"<SIGNED_GET_URL>\",\n      \"storage\":\"external\"\n    }\n  ],\n  \"options\":{\n    \"layers\":[\n      {                                        \n        \"add\":{                              \n          \"insertAbove\": {\n            \"id\": 549\n          }                    \n        },\n        \"adjustments\":{\n          \"brightnessContrast\":{\n            \"brightness\":25,\n            \"contrast\":-40\n          }\n        },\n        \"name\":\"NewBrightnessContrast\",\n        \"type\":\"adjustmentLayer\"              \n      }\n    ]\n  },\n  \"outputs\":[\n    {\n      \"href\":\"<SIGNED_POST_URL>\",\n      \"storage\":\"external\",\n      \"type\":\"image/jpeg\"\n    }\n  ]\n}'\n`}</code></pre>\n    <p>{`A call to this API initiates an asynchronous job and returns a response containing an href. Use the value in the href to poll for the status of the job. This is illustrated in `}<a parentName=\"p\" {...{\n        \"href\": \"#example-6-fetch-the-status\"\n      }}>{`Example 6`}</a>{`.`}</p>\n    <h4 {...{\n      \"id\": \"sample-5-editing-a-pixel-layer\"\n    }}>{`Sample 5: Editing a pixel layer`}</h4>\n    <p>{`In this example we want to replace the image in an existing pixel layer, the Hero Image layer in Example.psd. We are requesting the following:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`NEW KEYWORD TO INDICATE AN EDIT: The `}<inlineCode parentName=\"li\">{`edit`}</inlineCode>{` key is included to indicate we want to edit this layer`}</li>\n      <li parentName=\"ul\">{`NEW KEYWORD TO INDICATE IMAGE REPLACEMENT INFO: The `}<inlineCode parentName=\"li\">{`layers.input`}</inlineCode>{` object is included to indicate where the replacement image can be found`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`curl -X POST \\\\\n  https://image.adobe.io/pie/psdService/documentOperations \\\\\n  -H 'Authorization: Bearer <auth_token>' \\\\\n  -H 'Content-Type: application/json' \\\\\n  -H 'x-api-key: <YOUR_API_KEY>' \\\\\n  -d '{\n  \"inputs\":[\n    {\n      \"href\":\"<SIGNED_GET_URL>\",\n      \"storage\":\"external\"\n    }\n  ],\n  \"options\":{\n    \"layers\":[\n      {\n        \"edit\":{},                    \n        \"input\":{                                       \n          \"href\":\"<SIGNED_GET_URL>\",\n          \"storage\":\"external\"\n        },\n        \"bounds\":{\n          \"height\":405,\n          \"left\":0,\n          \"top\":237,\n          \"width\":300\n        },\n        \"id\":751,\n        \"index\":2,\n        \"locked\":false,\n        \"name\":\"BackgroundGradient\",\n        \"type\":\"layer\",\n        \"visible\":true\n      }\n    ]\n  },\n  \"outputs\":[\n    {\n      \"href\":\"<SIGNED_POST_URL>\",\n      \"storage\":\"external\",\n      \"type\":\"vnd.adobe.photoshop\",\n      \"overwrite\":true\n    }\n  ]\n}\n'\n`}</code></pre>\n    <p>{`A call to this API initiates an asynchronous job and returns a response containing an href. Use the value in the href to poll for the status of the job. This is illustrated in `}<a parentName=\"p\" {...{\n        \"href\": \"#example-6-fetch-the-status-of-the-job-after-successfully-submitting-a-request\"\n      }}>{`Example 6`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"example-4-renditioncreate\"\n    }}>{`Example 4: /renditionCreate`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`/renditionsCreate`}</inlineCode>{` endpoint can take a number of input PSD files and generate new image renditions or a new PSD`}</p>\n    <h4 {...{\n      \"id\": \"sample-1-a-single-file-input\"\n    }}>{`Sample 1: A single file input`}</h4>\n    <p>{`This sample API call will request two different output renditions from our Example.psd input:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Example.jpeg`}</inlineCode>{` is a new JPEG rendition that has a width of 512 pixels`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Example.png`}</inlineCode>{` is a new fullsize PNG rendition`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`curl -X POST \\\\\n  https://image.adobe.io/pie/psdService/renditionCreate \\\\\n  -H 'Authorization: Bearer <auth_token>' \\\\\n  -H 'Content-Type: application/json' \\\\\n  -H 'x-api-key: <YOUR_API_KEY>' \\\\\n  -d '{\n  \"inputs\":[\n    {\n      \"href\":\"<SIGNED_GET_URL>\",\n      \"storage\":\"external\"\n    }\n  ],\n  \"outputs\":[\n    {\n      \"href\":\"<SIGNED_POST_URL1>\",          \n      \"width\": 512,\n      \"storage\":\"external\",\n      \"type\":\"image/jpeg\"      \n    },\n    {\n      \"href\":\"<SIGNED_POST_URL2>\",\n      \"storage\":\"external\",\n      \"type\":\"image/png\"\n    }\n  ]\n}'\n`}</code></pre>\n    <p>{`A call to this API initiates an asynchronous job and returns a response containing an href. Use the value in the href to poll for the status of the job. This is illustrated in `}<a parentName=\"p\" {...{\n        \"href\": \"#example-6-fetch-the-status-of-the-job-after-successfully-submitting-a-request\"\n      }}>{`Example 6`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"example-5-documentmanifest\"\n    }}>{`Example 5: /documentManifest`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`/documentManifest`}</inlineCode>{` api can take one or more input PSD's to generate JSON manifest files from. The JSON manifest is the tree representation of all of the layer objects contained in the PSD document.`}</p>\n    <h4 {...{\n      \"id\": \"sample-1-initiate-a-job-to-retrieve-a-psds-json-manifest\"\n    }}>{`Sample 1: Initiate a job to retrieve a PSD's JSON manifest`}</h4>\n    <p>{`Using Example.psd, with the use case of a document stored in your external storage (ie. azure, aws, dropbox), a typical curl call might look like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`curl -X POST \\\\\n  https://image.adobe.io/pie/psdService/documentManifest \\\\\n  -H 'Authorization: Bearer <auth_token>' \\\\\n  -H 'Content-Type: application/json' \\\\\n  -H 'x-api-key: <YOUR_API_KEY>' \\\\\n  -d '{\n  \"inputs\": [\n    {\n      \"href\":\"<YOUR_PRESIGNED_URL>\",\n      \"storage\":\"external\"\n    }\n  ]\n}'\n`}</code></pre>\n    <p>{`A call to this API initiates an asynchronous job and returns a response containing an href. Use the value in the href to poll for the status of the job and the same response will also contain the JSON manifest. This is illustrated in `}<a parentName=\"p\" {...{\n        \"href\": \"#example-6-fetch-the-status\"\n      }}>{`Example 6`}</a>{` below.`}</p>\n    <h3 {...{\n      \"id\": \"example-6-fetch-the-status\"\n    }}>{`Example 6: Fetch the status`}</h3>\n    <p>{`Each of our Photoshop APIs, when invoked, initiates an asynchronous job and returns a response body that contains the href to poll for status of the job.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"_links\": {\n        \"self\": {\n            \"href\": \"https://image.adobe.io/pie/psdService/status/de2415fb-82c6-47fc-b102-04ad651c5ed4\"\n        }\n    }\n}\n`}</code></pre>\n    <p>{`Using the job id returned from the response (ass above) of a successfully submitted API call, you can poll on the corresponding value in the `}<inlineCode parentName=\"p\">{`href`}</inlineCode>{` field, to get the status of the job.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`curl -X GET \\\\\n  https://image.adobe.io/pie/psdService/status/de2415fb-82c6-47fc-b102-04ad651c5ed4 \\\\\n  -H 'Authorization: Bearer <auth_token>' \\\\\n  -H 'Content-Type: application/json' \\\\\n  -H 'x-api-key: <YOUR_API_KEY>'\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-1-poll-for-job-status---documentmanifest\"\n    }}>{`Sample 1 Poll for job status - documentManifest`}</h4>\n    <p>{`Once your job completes successfully (no errors/failures reported), the status response will contain your document's JSON manifest along with other metadata about the input document. The JSON Manifest is further described in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://git.corp.adobe.com/pages/dice/pie-in-the-sky/#api-Documents-document_manifest_status\"\n      }}>{`api docs`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"jobId\":\"63c6e812-6cb8-43de-8a60-3681a9ec6feb\",\n  \"outputs\":[\n    {\n      \"input\":\"<SIGNED_GET_URL>\",\n      \"status\":\"succeeded\",\n      \"created\":\"2018-08-24T23:07:36.8Z\",\n      \"modified\":\"2018-08-24T23:07:37.688Z\",\n      \"layers\":[\n        {\n          \"bounds\":{\n            \"height\":64,\n            \"left\":12,\n            \"top\":1,\n            \"width\":39\n          },\n          \"id\":549,\n          \"index\":8,\n          \"locked\":false,\n          \"name\":\"CompanyLogo\",\n          \"type\":\"smartObject\",\n          \"visible\":true\n        },\n        {\n          \"bounds\":{\n            \"height\":153,\n            \"left\":31,\n            \"top\":334,\n            \"width\":197\n          },\n          \"children\":[\n            {\n              \"bounds\":{\n                \"height\":136,\n                \"left\":29,\n                \"top\":326,\n                \"width\":252\n              },\n              \"text\": {\n                \"content\":\"Reset your customers’ expectations.\",\n                \"paragraphStyles\":[\n                  {   \n                    \"alignment\":\"left\"\n                  }\n                ],\n                \"characterStyles\":[{\n                  \"fontAvailable\":true,\n                  \"fontName\":\"AdobeClean-Bold\",\n                  \"fontSize\":36,\n                  \"orientation\":\"horizontal\",\n                }]               \n              },\n              \"id\":412,\n              \"index\":6,\n              \"locked\":false,\n              \"name\":\"Reset your customers’ expectations.\",\n              \"type\":\"textLayer\",\n              \"visible\":true\n            },\n            {\n              \"bounds\":{\n                \"height\":67,\n                \"left\":30,\n                \"top\":452,\n                \"width\":230\n              },\n              \"text\":{\n                \"content\":\"Get our retail experience article and infographic.\",\n                \"paragraphStyles\":[{\n                  \"alignment\":\"left\"\n                }],\n                \"characterStyles\":[{\n                  \"fontAvailable\":true,\n                  \"fontName\":\"AdobeClean-Regular\",\n                  \"fontSize\":15,\n                  \"orientation\":\"horizontal\",\n                }]\n              },\n              \"id\":676,\n              \"index\":5,\n              \"locked\":false,\n              \"name\":\"Get our retail experience article and infographic.\",\n              \"type\":\"textLayer\",\n              \"visible\":true\n            }\n          ],\n          \"id\":453,\n          \"index\":7,\n          \"locked\":false,\n          \"name\":\"Headline\",\n          \"type\":\"layerSection\",\n          \"visible\":true\n        },\n        {\n          \"bounds\":{\n            \"height\":34,\n            \"left\":31,\n            \"top\":508,\n            \"width\":99\n          },\n          \"id\":762,\n          \"index\":3,\n          \"locked\":false,\n          \"name\":\"CallToAction\",\n          \"type\":\"smartObject\",\n          \"visible\":true\n        },\n        {\n          \"bounds\":{\n            \"height\":405,\n            \"left\":0,\n            \"top\":237,\n            \"width\":300\n          },\n          \"id\":751,\n          \"index\":2,\n          \"locked\":false,\n          \"name\":\"BackgroundGradient\",\n          \"type\":\"layer\",\n          \"visible\":true\n        },\n        {\n          \"bounds\":{\n            \"height\":515,\n            \"left\":-385,\n            \"top\":-21,\n            \"width\":929\n          },\n          \"id\":750,\n          \"index\":1,\n          \"locked\":false,\n          \"name\":\"HeroImage\",\n          \"type\":\"smartObject\",\n          \"visible\":true\n        },\n        {\n          \"bounds\":{\n            \"height\":600,\n            \"left\":0,\n            \"top\":0,\n            \"width\":300\n          },\n          \"id\":557,\n          \"index\":0,\n          \"locked\":false,\n          \"name\":\"Background\",\n          \"type\":\"layer\",\n          \"visible\":true\n        }\n      ],\n      \"document\":{\n        \"height\":600,\n        \"name\":\"Example.psd\",\n        \"width\":300\n      }\n    }\n  ],\n  \"_links\":{\n    \"self\":{\n      \"href\":\"https://image.adobe.io/pie/psdService/status/8ec6e4f5-b580-41ac-b693-a72f150fec59\"\n    }\n  }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-2-poll-for-job-status---other-apis\"\n    }}>{`Sample 2 Poll for job status - Other APIs`}</h4>\n    <p>{`Once your job completes successfully (no errors/failures reported), this will return a response body containing the job status for each requested output. For the `}<inlineCode parentName=\"p\">{`/renditionCreate`}</inlineCode>{` API call in Example 4 in Sample 4.1 as illustrated above, a sample response containing the job status is as shown below:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"jobId\":\"de2415fb-82c6-47fc-b102-04ad651c5ed4\",\n  \"outputs\":[\n    {\n      \"input\":\"<SIGNED_GET_URL>\",\n      \"status\":\"succeeded\",\n      \"created\":\"2018-01-04T12:57:15.12345:Z\",\n      \"modified\":\"2018-01-04T12:58:36.12345:Z\",\n      \"_links\":{\n        \"renditions\":[\n          {\n            \"href\":\"<SIGNED_GET_URL>\",          \n            \"width\": 512,\n            \"storage\":\"adobe\",\n            \"type\":\"image/jpeg\"    \n          },\n          {\n            \"href\":\"<SIGNED_GET_URL>\",\n            \"storage\":\"adobe\",\n            \"type\":\"image/png\"\n          }\n        ]\n      }\n    }\n  ],\n  \"_links\":{\n    \"self\":{\n      \"href\":\"https://image.adobe.io/pie/psdService/status/de2415fb-82c6-47fc-b102-04ad651c5ed4\"\n    }\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-7-photoshop-actions\"\n    }}>{`Example 7: Photoshop Actions`}</h3>\n    <h4 {...{\n      \"id\": \"sample-1---play-all-actions-in-atn-file\"\n    }}>{`Sample 1 - Play ALL actions in .atn file.`}</h4>\n    <pre><code parentName=\"pre\" {...{}}>{`export token=<YOUR_TOKEN>\nexport api_key =<YOUR_API_KEY>\ncurl -H \"Authorization: Bearer $token\" -H \"x-api-key: $api_key\" https://image.adobe.io/pie/psdService/photoshopActions -d '{\n  \"inputs\": [\n    {\n      \"href\": \"https://as2.ftcdn.net/jpg/02/49/48/49/500_F_249484911_JifPIzjUqzkRhcdMkF9GnsUI9zaqdAsn.jpg\",\n      \"storage\": \"external\"\n    }\n  ],\n  \"options\": {\n    \"actions\": [\n      {\n        \"href\": \"https://raw.githubusercontent.com/johnleetran/ps-actions-samples/master/actions/Oil-paint.atn\",\n        \"storage\": \"external\"\n      }\n    ]\n  },\n  \"outputs\": [\n    {\n      \"storage\": \"external\",\n      \"type\": \"image/jpeg\",\n      \"href\": \"https://some-presigned-url/output.jpeg\"\n    }\n  ]\n}'\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-2---play-a-specific-action\"\n    }}>{`Sample 2 - Play a specific action`}</h4>\n    <p>{`By default, Photoshop API will attempt to play all actions in an action set.  If you would like to only playback a specific action, you can specify `}<inlineCode parentName=\"p\">{`actionName`}</inlineCode>{` and the name of the action you want to invoke (see example below).`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`export token=<YOUR_TOKEN>\nexport api_key =<YOUR_API_KEY>\ncurl -H \"Authorization: Bearer $token\" -H \"x-api-key: $api_key\" https://image.adobe.io/pie/psdService/photoshopActions -d '{\n  \"inputs\": [\n    {\n      \"href\": \"https://as2.ftcdn.net/jpg/02/49/48/49/500_F_249484911_JifPIzjUqzkRhcdMkF9GnsUI9zaqdAsn.jpg\",\n      \"storage\": \"external\"\n    }\n  ],\n  \"options\": {\n    \"actions\": [\n      {\n        \"href\": \"https://raw.githubusercontent.com/johnleetran/ps-actions-samples/master/actions/Oil-paint.atn\",\n        \"storage\": \"external\",\n        \"actionName\": \"Action 51\"\n      }\n    ]\n  },\n  \"outputs\": [\n    {\n      \"storage\": \"external\",\n      \"type\": \"image/jpeg\",\n      \"href\": \"https://some-presigned-url/output.jpeg\"\n    }\n  ]\n}'\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"lightroom\"\n    }}>{`Lightroom`}</h2>\n    <h3 {...{\n      \"id\": \"example-1-autotone-an-image\"\n    }}>{`Example 1: Autotone an image`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`curl -X POST \\\\\n-H \"authorization: Bearer $token\" \\\\\n-H \"Content-Type:application/json\" \\\\\n-H \"x-api-key:$x-api-key\" \\\\\n-d '{\n    \"inputs\": {\n        \"href\": \"<href>\",\n        \"storage\": \"<storage>\"\n    },\n    \"outputs\": [\n        {\n            \"href\": \"<href>\",\n            \"type\": \"<type>\",\n            \"storage\": \"<storage>\",\n            \"overwrite\": <boolean>\n        }\n    ]\n}'\nhttps://image.adobe.io/lrService/autoTone\n`}</code></pre>\n    <p>{`This initiates an asynchronous job and returns a request body containing the href to poll for job status.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"_links\": {\n        \"self\": {\n            \"href\": \"https://image.adobe.io/lrService/status/<:jobId>\"\n        }\n    }\n}\n`}</code></pre>\n    <p>{`To check the status of the job completion, use the `}<inlineCode parentName=\"p\">{`/status`}</inlineCode>{` API. An example usage of the API can be found `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/AdobeDocs/lightroom-api-docs#job-status\"\n      }}>{`here`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"example-2-autostraighten-an-image\"\n    }}>{`Example 2: Autostraighten an image`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`curl -X POST \\\\\n-H \"authorization: Bearer $token\" \\\\\n-H \"Content-Type:application/json\" \\\\\n-H \"x-api-key:$x-api-key\" \\\\\n-d '{\n    \"inputs\": {\n        \"href\": \"<href>\",\n        \"storage\": \"<storage>\"\n    },\n    \"outputs\": [\n        {\n            \"href\": \"<href>\",\n            \"type\": \"<type>\",\n            \"storage\": \"<storage>\",\n            \"overwrite\": <boolean>\n        }\n    ]\n}'\nhttps://image.adobe.io/lrService/autoStraighten\n`}</code></pre>\n    <p>{`This initiates an asynchronous job and returns a request body containing the href to poll for job status.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"_links\": {\n        \"self\": {\n            \"href\": \"https://image.adobe.io/lrService/status/<:jobId>\"\n        }\n    }\n}\n`}</code></pre>\n    <p>{`To check the status of the job completion, use the `}<inlineCode parentName=\"p\">{`/status`}</inlineCode>{` API. An example usage of the API can be found `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/AdobeDocs/lightroom-api-docs#job-status\"\n      }}>{`here`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"example-3--apply-presets-to-an-image\"\n    }}>{`Example 3 : Apply presets to an image`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`curl -X POST \\\\\n-H \"authorization: Bearer $token\" \\\\\n-H \"Content-Type:application/json\" \\\\\n-H \"x-api-key:$x-api-key\" \\\\\n-d '{\n    \"inputs\": {\n        \"source\": {\n            \"href\": \"<href>\",\n            \"storage\": \"<storage>\"\n        },\n        \"presets\": [\n            {\n                \"href\": \"<href1>\",\n                \"storage\": \"<storage>\"\n            },\n            {\n                \"href\": \"<href2>\",\n                \"storage\": \"<storage>\"\n            }\n        ]\n    },\n    \"outputs\": [\n        {\n            \"href\": \"<href>\",\n            \"type\": \"<type>\",\n            \"storage\": \"<storage>\",\n            \"overwrite\": <boolean>\n        }\n    ]\n}'\nhttps://image.adobe.io/lrService/presets\n`}</code></pre>\n    <p>{`This initiates an asynchronous job and returns a request body containing the href to poll for job status.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"_links\": {\n        \"self\": {\n            \"href\": \"https://image.adobe.io/lrService/status/<:jobId>\"\n        }\n    }\n}\n`}</code></pre>\n    <p>{`To check the status of the job completion, use the `}<inlineCode parentName=\"p\">{`/status`}</inlineCode>{` API. An example usage of the API can be found `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/AdobeDocs/lightroom-api-docs#job-status\"\n      }}>{`here`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"example-4-apply-edits-to-an-image\"\n    }}>{`Example 4: Apply edits to an image`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`curl -X POST \\\\\n-H \"authorization: Bearer $token\" \\\\\n-H \"Content-Type:application/json\" \\\\\n-H \"x-api-key:$x-api-key\" \\\\\n-d '{\n    \"inputs\": {\n        \"source\": {\n            \"href\": \"<href>\",\n            \"storage\": \"<storage>\"\n        }\n    },\n    \"options\": {\n        \"Exposure\": -5.00 to 5.00,\n        \"Contrast\": -100 to 100,\n        \"Sharpness\": 0 10 150,\n        \"WhiteBalance\": <\"As Shot\", \"Auto\", \"Cloudy\", \"Custom\", \"Daylight\", \"Flash\", \"Fluorescent\", \"Shade\", \"Tungsten\">\n        \"Saturation\": -100 to 100,\n        \"ColorNoiseReduction\": 0 to 100,\n        \"NoiseReduction\": 0 to 100,\n        \"VignetteAmount\": -100 to 100,\n        \"Vibrance\": -100 to 100,\n        \"Highlights\": -100 to 100,\n        \"Shadows\": -100 to 100,\n        \"Whites\": -100 to 100,\n        \"Blacks\": -100 to 100,\n        \"Clarity\": -100 to 100,\n        \"Dehaze\": -100 to +100,\n        \"SharpenRadius\": 0.5 to 3.0,\n        \"SharpenDetail\": 0 to 100,\n        \"SharpenEdgeMasking\": 0 to 100,\n        \"Texture\": -100 t0 100\n    },\n    \"outputs\": [\n        {\n            \"href\": \"<href>\",\n            \"type\": \"<type>\",\n            \"storage\": \"<storage>\",\n            \"overwrite\": <boolean>\n        }\n    ]\n}'\nhttps://image.adobe.io/lrService/edit\n`}</code></pre>\n    <p>{`This initiates an asynchronous job and returns a request body containing the href to poll for job status.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"_links\": {\n        \"self\": {\n            \"href\": \"https://image.adobe.io/lrService/status/<:jobId>\"\n        }\n    }\n}\n`}</code></pre>\n    <p>{`To check the status of the job completion, use the `}<inlineCode parentName=\"p\">{`/status`}</inlineCode>{` API. An example usage of the API can be found `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/AdobeDocs/lightroom-api-docs#job-status\"\n      }}>{`here`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"example-5-apply-xmp-to-an-image\"\n    }}>{`Example 5: Apply xmp to an image`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`curl -X POST \\\\\n-H \"authorization: Bearer $token\" \\\\\n-H \"Content-Type:application/json\" \\\\\n-H \"x-api-key:$x-api-key\" \\\\\n-d '{\n    \"inputs\": {\n        \"href\": \"<href>\",\n        \"storage\": \"<storage>\"\n    },\n    \"options\": {\n        \"xmp\": \"<xmp>\"\n    },\n    \"outputs\": [\n        {\n            \"href\": \"<href>\",\n            \"storage\": \"<storage>\",\n            \"type\": \"<type>\"\n        }\n    ]\n}'\nhttps://image.adobe.io/lrService/xmp\n`}</code></pre>\n    <p>{`This initiates an asynchronous job and returns a request body containing the href to poll for job status.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"_links\": {\n        \"self\": {\n            \"href\": \"https://image.adobe.io/lrService/status/<:jobId>\"\n        }\n    }\n}\n`}</code></pre>\n    <p>{`To check the status of the job completion, use the `}<inlineCode parentName=\"p\">{`/status`}</inlineCode>{` API. An example usage of the API can be found `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/AdobeDocs/lightroom-api-docs#job-status\"\n      }}>{`here`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"example-6-poll-for-status-and-results\"\n    }}>{`Example 6: Poll for status and results`}</h3>\n    <p>{`Use the JobID to poll on the href that is returned in the response from one of the Lightroom APIs.`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Upon successful job completion, the output file will be available at the specified output href.`}</li>\n      <li parentName=\"ol\">{`If the job failed due to an error, the `}<inlineCode parentName=\"li\">{`errorDetails`}</inlineCode>{` field in the response will contain the details of the failure.`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`curl -X GET \\\\\n  https://image.adobe.io/lrService/status/<jobId> \\\\\n  -H 'Authorization: Bearer <auth_token>' \\\\\n  -H 'Content-Type: application/json' \\\\\n  -H 'x-api-key: <YOUR_API_KEY>'\n`}</code></pre>\n    <p>{`And this will return a request body containing the job status for each requested output and eventually either errors or the hrefs to the requested outputs`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"jobId\":\"<jobId>\",\n  \"created\":\"2018-01-04T12:57:15.12345:Z\",\n  \"modified\":\"2018-01-04T12:58:36.12345:Z\",\n  \"outputs\":[\n  {\n      \"input\":\"<input_file_href>\",\n      \"status\":\"succeeded\",\n      \"_links\":{\n        \"self\":\n        {\n          \"href\":\"<output_file_href>\",\n          \"storage\":\"adobe\"\n        }\n      }\n    }\n  ],\n  \"_links\":{\n    \"self\":{\n      \"href\":\"https://image.adobe.io/lrService/status/<jobId>\"\n    }\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"sensei\"\n    }}>{`Sensei`}</h2>\n    <p>{`First be sure to follow the instructions in the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../getting-started/#overview\"\n      }}>{`Overview`}</a>{` section to get your token.`}</p>\n    <h3 {...{\n      \"id\": \"example-1-image-cutout\"\n    }}>{`Example 1: Image cutout`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`/cutout`}</inlineCode>{` api takes a single input image to generate your mask or cutout from. Using `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/AdobeDocs/cis-photoshop-api-docs-pre-release/blob/main/sample_files/Example.jpg\"\n      }}>{`Example.jpg`}</a>{`, a typical curl call might look like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`curl -X POST \\\\\n  https://image.adobe.io/sensei/cutout \\\\\n  -H 'Authorization: Bearer <auth_token>' \\\\\n  -H 'Content-Type: application/json' \\\\\n  -H 'x-api-key: <YOUR_API_KEY>' \\\\\n  -d '{\n   \"input\":{\n      \"storage\":\"external\",\n      \"href\":\"<SIGNED_GET_URL>\"\n   },\n   \"output\":{\n      \"storage\":\"external\",\n      \"href\":\"<SIGNED_PUT_URL>\",\n      \"mask\":{\n         \"format\":\"binary\"\n      }\n   }\n}'\n`}</code></pre>\n    <p>{`This initiates an asynchronous job and returns a response containing the href to poll for job status and the JSON manifest.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"_links\": {\n        \"self\": {\n            \"href\": \"https://image.adobe.io/sensei/status/e3a13d81-a462-4b71-9964-28b2ef34aca7\"\n        }\n    }\n}\n`}</code></pre>\n    <p>{`Using the job id returned from the previous call you can poll on the returned `}<inlineCode parentName=\"p\">{`/status`}</inlineCode>{` href to get the job status`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`curl -X GET \\\\\n  https://image.adobe.io/sensei/status/e3a13d81-a462-4b71-9964-28b2ef34aca7 \\\\\n  -H 'Authorization: Bearer <auth_token>' \\\\\n  -H 'Content-Type: application/json' \\\\\n  -H 'x-api-key: <YOUR_API_KEY>'\n`}</code></pre>\n    <p>{`Once the job is complete your successful `}<inlineCode parentName=\"p\">{`/status`}</inlineCode>{` response will look similar to the response below; The output will have been placed in your requested location. In the event of failure the errors will be shown instead`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"jobID\": \"e3a13d81-a462-4b71-9964-28b2ef34aca7\",\n    \"status\": \"succeeded\",\n    \"created\": \"2020-02-11T21:08:43.789Z\",\n    \"modified\": \"2020-02-11T21:08:48.492Z\",\n    \"input\": \"<SIGNED_GET_URL>\",\n    \"_links\": {\n        \"self\": {\n            \"href\": \"https://image.adobe.io/sensei/status/e3a13d81-a462-4b71-9964-28b2ef34aca7\"\n        }\n    },\n    \"output\": {\n        \"storage\": \"external\",\n        \"href\": \"<SIGNED_PUT_URL>\",\n        \"mask\": {\n            \"format\": \"binary\"\n        }\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-2-image-mask\"\n    }}>{`Example 2: Image mask`}</h3>\n    <p>{`The workflow is exactly the same as `}<a parentName=\"p\" {...{\n        \"href\": \"#example-1-initiate-a-job-to-create-an-image-cutout\"\n      }}>{`creating an image cutout`}</a>{` except you use the `}<inlineCode parentName=\"p\">{`/mask`}</inlineCode>{` endpoint instead of `}<inlineCode parentName=\"p\">{`/cutout`}</inlineCode>{`.  `}</p>\n    <h3 {...{\n      \"id\": \"example-3-generate-imagecutout-result-as-photoshop-path\"\n    }}>{`Example 3: (Generate ImageCutOut result as Photoshop path)`}</h3>\n    <p>{`This workflow is ONLY for users who'd like to generate cutout result as Photoshop path instead of regular mask or cutout in above `}<a parentName=\"p\" {...{\n        \"href\": \"#example-1-initiate-a-job-to-create-an-image-cutout\"\n      }}>{`example 1`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"#example-2-initiate-a-job-to-create-an-image-mask\"\n      }}>{`example 2`}</a>{`. You will need to chain API calls to ImageCutOut service and Photoshop Service to achieve this goal.`}</p>\n    <h4 {...{\n      \"id\": \"sample-inputoutput\"\n    }}>{`Sample Input/Output`}</h4>\n    <p>{`Sample input from `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/AdobeDocs/cis-photoshop-api-docs-pre-release/blob/main/sample_files/ic_customized_workflow/input.jpg\"\n      }}>{`here`}</a>{`.\nSample output from `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/AdobeDocs/cis-photoshop-api-docs-pre-release/blob/main/sample_files/ic_customized_workflow/result_with_path.jpg\"\n      }}>{`here`}</a>{` (Note: you will need to open result in Photoshop Desktop application so that you will see the path in path panel)`}</p>\n    <h4 {...{\n      \"id\": \"instructions\"\n    }}>{`Instructions`}</h4>\n    <ol>\n      <li parentName=\"ol\">{`Download the make-file.atn file from `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/AdobeDocs/cis-photoshop-api-docs-pre-release/blob/main/sample_files/ic_customized_workflow/make-path.atn\"\n        }}>{`here`}</a>{` (this file will be used in the Photoshop action API call)`}</li>\n      <li parentName=\"ol\">{`Make the first API call to ImageCutOut service to generate intermediate result as RGBA cutout`}</li>\n      <li parentName=\"ol\">{`Make the second API call to Photoshop action service to use above intermediate result as well as the make-file.atn file to generate final JPEG format result with desired PS path embedded`}</li>\n      <li parentName=\"ol\">{`Open the final result with Photoshop Desktop app to check generated path in path panel`}</li>\n    </ol>\n    <h4 {...{\n      \"id\": \"sample-code\"\n    }}>{`Sample Code`}</h4>\n    <p>{`You can download the sample end-to-end bash script `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/AdobeDocs/cis-photoshop-api-docs-pre-release/tree/main/sample-code/ic-customized-workflow-app\"\n      }}>{`here`}</a>{` and then follow the comments to try it out this customized workflow.`}</p>\n    <h2 {...{\n      \"id\": \"triggering-an-event-from-the-apis\"\n    }}>{`Triggering an Event from the API's`}</h2>\n    <p>{`In order to start receiving the events in your Webhook Application, the additional thing that needs to be done is to pass in your IMS ORG ID in a header: `}<inlineCode parentName=\"p\">{`x-gw-ims-org-id: <YOUR_IMS_ORG_ID>`}</inlineCode>{`, when you make an API call to initiate a job. Please have a look at the examples below that demonstrates the usage of the new header and a sample event received for that job.`}</p>\n    <h3 {...{\n      \"id\": \"example-1-documentmanifest-retrieving-a-psd-manifest-from-the-photoshop-api\"\n    }}>{`Example 1: /documentManifest (Retrieving a PSD manifest from the Photoshop API)`}</h3>\n    <h4 {...{\n      \"id\": \"step-1-initiate-a-job-to-retrieve-a-psds-json-manifest\"\n    }}>{`Step 1: Initiate a job to retrieve a PSD's JSON manifest`}</h4>\n    <p>{`The `}<inlineCode parentName=\"p\">{`/documentManifest`}</inlineCode>{` api can take one or more input PSD's to generate JSON manifest files from. The JSON manifest is the tree representation of all of the layer objects contained in the PSD document. Using Example.psd, with the use case of a document stored in your external storage, a typical curl call might look like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`curl -X POST \\\\\n  https://image.adobe.io/pie/psdService/documentManifest \\\\\n  -H 'Authorization: Bearer <auth_token>' \\\\\n  -H 'Content-Type: application/json' \\\\\n  -H 'x-api-key: <YOUR_API_KEY>' \\\\\n  -H 'x-gw-ims-org-id: <YOUR_IMS_ORG_ID>' \\\\\n  -d '{\n  \"inputs\": [\n    {\n      \"href\":\"<SIGNED_GET_URL>\",\n      \"storage\":\"external\"\n    }\n  ]\n}'\n`}</code></pre>\n    <p>{`This initiates an asynchronous job and returns a response containing the href to poll for job status and the JSON manifest.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"_links\": {\n        \"self\": {\n            \"href\": \"https://image.adobe.io/pie/psdService/status/63c6e812-6cb8-43de-8a60-3681a9ec6feb\"\n        }\n    }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"step-2-receive-the-jobs-status-on-the-webhook-application-when-the-job-is-complete\"\n    }}>{`Step 2: Receive the Job's status on the Webhook application when the job is complete`}</h4>\n    <p>{`The value in the key `}<inlineCode parentName=\"p\">{`body`}</inlineCode>{` inside the event JSON contains the result of the job. Here is a sample event received from the job initiated above:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"event_id\": \"b412a90e-8bc0-4f0d-931e-9e9b8d24993d\",\n  \"event\": {\n    \"header\": {\n      \"msgType\": \"JOB_COMPLETION_STATUS\",\n      \"msgId\": \"8afa1a46-2733-406c-a646-e1c1acdee333\",\n      \"imsOrgId\": \"<YOUR_IMS_ORG_ID>\",\n      \"eventCode\": \"photoshop-job-status\",\n      \"_pipelineMeta\": {\n        \"pipelineMessageId\": \"1586288145511:631472:VA7_A1:142:0\"\n      },\n      \"_smarts\": {\n        \"definitionId\": \"3ee6c9056a9d72fc40e09ddf5fdbb0af752e8e49\",\n        \"runningSmartId\": \"psmart-yw6wosjksniuuathenny\"\n      },\n      \"_adobeio\": {\n        \"imsOrgId\": \"<YOUR_IMS_ORG_ID>\",\n        \"providerMetadata\": \"di_event_code\",\n        \"eventCode\": \"photoshop-job-status\"\n      }\n    },\n    \"body\": {\n      \"jobId\": \"63c6e812-6cb8-43de-8a60-3681a9ec6feb\",\n      \"outputs\": [\n        {\n          \"status\": \"succeeded\",\n          \"layers\": [\n            {\n              \"id\": 2,\n              \"index\": 0,\n              \"type\": \"layer\",\n              \"name\": \"Layer\",\n              \"locked\": false,\n              \"visible\": true,\n              \"bounds\": {\n                \"top\": 0,\n                \"left\": 0,\n                \"width\": 100,\n                \"height\": 100\n              },\n              \"blendOptions\": {\n                \"opacity\": 100,\n                \"mode\": \"normal\"\n              }\n            }\n          ],\n          \"document\": {\n            \"name\": \"test.psd\",\n            \"width\": 1000,\n            \"height\": 1000,\n            \"bitDepth\": 8,\n            \"imageMode\": \"rgb\",\n            \"photoshopBuild\": \"Adobe Creative Imaging Service\"\n          }\n        }\n      ],\n      \"_links\":{\n        \"self\":{\n          \"href\":\"https://image.adobe.io/pie/psdService/status/8ec6e4f5-b580-41ac-b693-a72f150fec59\"\n        }\n      }\n    }\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-2-autotone-auto-tone-an-image-through-the-lightroom-api\"\n    }}>{`Example 2: /autoTone (Auto tone an image through the Lightroom API)`}</h3>\n    <h4 {...{\n      \"id\": \"step-1-initiate-a-job-to-auto-tone-an-image\"\n    }}>{`Step 1: Initiate a job to auto tone an image`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`curl -X POST \\\\\n  https://image.adobe.io/lrService/autoTone \\\\\n  -H \"Authorization: Bearer $token\" \\\\\n  -H \"Content-Type: application/json\" \\\\\n  -H \"x-api-key: <YOUR_API_KEY>\" \\\\\n  -H 'x-gw-ims-org-id: <YOUR_IMS_ORG_ID>' \\\\\n  -d '{\n    \"inputs\": {\n      \"href\": \"<SIGNED_GET_URL>\",\n      \"storage\": \"external\"\n    },\n    \"outputs\": [\n    {\n      \"href\": \"<SIGNED_PUT_URL>\",\n      \"type\": \"<type>\",\n      \"storage\": \"external\",\n      \"overwrite\": <boolean>\n    }\n  ]\n}'\n`}</code></pre>\n    <p>{`This initiates an asynchronous job and returns a request body containing the href to poll for job status.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"_links\": {\n        \"self\": {\n            \"href\": \"https://image.adobe.io/lrService/status/eb4a9211-eb8a-4e88-b853-b9c08ba47427\"\n        }\n    }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"step-2-receive-the-jobs-status-on-the-webhook-application-when-the-job-is-complete-1\"\n    }}>{`Step 2: Receive the Job's status on the Webhook application when the job is complete`}</h4>\n    <p>{`The value in the key `}<inlineCode parentName=\"p\">{`body`}</inlineCode>{` inside the event JSON contains the result of the job. Here is a sample event received from the job initiated above:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"event_id\": \"7b59cc70-88d7-4895-b204-87f5350a0cce\",\n  \"event\": {\n    \"header\": {\n      \"msgType\": \"JOB_COMPLETION_STATUS\",\n      \"msgId\": \"eb4a9211-eb8a-4e88-b853-b9c08ba47427\",\n      \"imsOrgId\": \"<YOUR_IMS_ORG_ID>\",\n      \"eventCode\": \"lightroom-job-status\",\n      \"_pipelineMeta\": {\n        \"pipelineMessageId\": \"1586290300876:944289:VA7_A1:149:0\"\n      },\n      \"_smarts\": {\n        \"definitionId\": \"3ee6c9056a9d72fc40e09ddf5fdbb0af752e8e49\",\n        \"runningSmartId\": \"psmart-yw6wosjksniuuathenny\"\n      },\n      \"_adobeio\": {\n        \"imsOrgId\": \"<YOUR_IMS_ORG_ID>\",\n        \"providerMetadata\": \"di_event_code\",\n        \"eventCode\": \"lightroom-job-status\"\n      }\n    },\n    \"body\": {\n      \"jobId\": \"eb4a9211-eb8a-4e88-b853-b9c08ba47427\",\n      \"outputs\": [\n        {\n          \"input\": \"<SIGNED_GET_URL>\",\n          \"status\": \"succeeded\",\n          \"_links\": {\n            \"self\": [\n              {\n                \"href\": \"<SIGNED_PUT_URL>\",\n                \"storage\": \"external\"\n              }\n            ]\n          }\n        }\n      ],\n      \"_links\": {\n        \"self\": {\n          \"href\": \"https://image.adobe.io/lrService/status/eb4a9211-eb8a-4e88-b853-b9c08ba47427\"\n        }\n      }\n    }\n  }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}